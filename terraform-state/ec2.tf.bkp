#provider block

provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region     = "${var.region}"
}

terraform {

  backend "s3" {
    access_key = "AKIA2MIL24FBNHKJVLPZ"
    secret_key = "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"
    bucket         = "iwayq-terraform-state"
    key            = "iwayq/prod"
    region         = "us-east-1"
    dynamodb_table = "iwayq-dynamodb-lock-state"
  }
}

#Create EC2 instance
resource "aws_instance" "TestInstance1" {
  ami             = "ami-0b69ea66ff7391e80"
  instance_type   = "${var.instance_type}"
  count = 1
  key_name = "awskey1"
  vpc_security_group_ids = [
      "${aws_security_group.webSG.id}",
  ]
  tags =  {
    Name = "iwayQInstance1"
  }

}
data "aws_ami" "TestAMI" {
  most_recent = true
  owners = ["amazon"]

  
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-2.0.*"]
  }
}

#resources

#Create Security Group  
resource "aws_security_group" "webSG" {
  name        = "webSG"
  description = "Allow ssh  inbound traffic"
  vpc_id      = "vpc-d12868ab"

  ingress {
    # TLS (change to whatever ports you need)
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    # TLS (change to whatever ports you need)
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
    
  }
}



#outputs

output "TestInstance1_pub_ip" {
    value = "${aws_instance.TestInstance1.0.public_ip}"
}

output "TestInstance1_id" {
    value = "${aws_instance.TestInstance1.0.id}"
}
